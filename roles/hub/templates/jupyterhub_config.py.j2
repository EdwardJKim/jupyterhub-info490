# Configuration file for Jupyter Hub
import os
import sys
sys.path.insert(0, '/srv/jupyterhub_config')

c = get_config()

c.JupyterHub.log_level = 'INFO'

c.JupyterHub.db_url = 'sqlite:////srv/jupyterhub/jupyterhub.sqlite'

c.JupyterHub.admin_access = True

c.JupyterHub.authenticator_class = 'remote_user_auth.RemoteUserAuthenticator'
c.Authenticator.admin_users = admin = set()
c.Authenticator.whitelist = whitelist = set()

#The docker instances need access to the Hub, so the default loopback port
# doesn't work. We need to tell the hub to listen on 0.0.0.0 because it's in a
# container, and we'll expose the port properly when the container is run. Then,
# we explicitly tell the spawned containers to connect to the proper IP address.
c.JupyterHub.proxy_api_ip = '0.0.0.0'
c.JupyterHub.hub_ip = '0.0.0.0'
c.DockerSpawner.hub_ip_connect = os.environ['HUB_IP']

c. JupyterHub.confirm_no_ssl = True

c.JupyterHub.spawner_class = 'swarmspawner.SwarmSpawner'
c.DockerSpawner.container_image = 'singleuser'
c.DockerSpawner.tls_cert = os.environ['DOCKER_TLS_CERT']
c.DockerSpawner.tls_key = os.environ['DOCKER_TLS_KEY']
c.DockerSpawner.remove_containers = True
c.DockerSpawner.volumes = {
    '/home/{username}': '/home/data_scientist',
    '{{ exchange_directory }}/{username}': '{{ exchange_directory}}'
}
c.DockerSpawner.read_only_volumes = {
    '/srv/shared/data': '/home/data_scientist/data',
    '/shared/info490-fa16': '/home/data_scientist/info490-fa16_RO',
    '/shared/outbound': '{{exchange_directory}}/info490-fa16/outbound'
}
c.SwarmSpawner.singleuser = "data_scientist"
c.SwarmSpawner.hostname = "info490rb.studentspace.cs.illinois.edu"
c.SwarmSpawner.course_id = "info490-fa16"
c.Spawner.http_timeout = 120

with open('/srv/jupyterhub_users/userlist') as f:
    for line in f:
        if line.isspace():
            continue
        parts = line.split()
        name = parts[0]
        whitelist.add(name)
        if len(parts) > 1 and parts[1] == 'admin':
            admin.add(name)
